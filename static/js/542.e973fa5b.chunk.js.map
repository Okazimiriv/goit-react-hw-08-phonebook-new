{"version":3,"file":"static/js/542.e973fa5b.chunk.js","mappings":"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","sources":["components/LoginForm/LoginForm.styled.jsx","../node_modules/@chakra-ui/avatar/src/avatar-context.tsx","../node_modules/@chakra-ui/avatar/src/avatar-name.tsx","../node_modules/@chakra-ui/avatar/src/generic-avatar-icon.tsx","../node_modules/@chakra-ui/avatar/src/avatar-image.tsx","../node_modules/@chakra-ui/image/src/use-image.ts","../node_modules/@chakra-ui/avatar/src/avatar.tsx","components/LoginForm/LoginForm.js","pages/LoginPage.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const LinkWrap = styled(Link)`\n  display: inline-block;\n  text-decoration: none;\n  padding: 12px;\n  // font-weight: 700;\n  // color: #2a363b;\n  color: teal;\n\n   &:hover {\n    text-decoration: underline;    \n    color: teal;\n    }\n  `;\n\nexport const Form = styled.form` \n  width: 320px;\n  `;\n\n  export const Label = styled.label` \n  display: flex;\n  flex-direction: column;\n  margin-bottom: 16px;\n  `;\n\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { SystemStyleObject } from \"@chakra-ui/system\"\n\nexport const [AvatarStylesProvider, useAvatarStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `AvatarStylesContext`,\n  hookName: `useAvatarStyles`,\n  providerName: \"<Avatar/>\",\n})\n","import { chakra, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { useAvatarStyles } from \"./avatar-context\"\nimport { AvatarOptions } from \"./avatar-types\"\n\nexport function initials(name: string) {\n  const names = name.split(\" \")\n  const firstName = names[0] ?? \"\"\n  const lastName = names.length > 1 ? names[names.length - 1] : \"\"\n  return firstName && lastName\n    ? `${firstName.charAt(0)}${lastName.charAt(0)}`\n    : firstName.charAt(0)\n}\n\ninterface AvatarNameProps\n  extends HTMLChakraProps<\"div\">,\n    Pick<AvatarOptions, \"name\" | \"getInitials\"> {}\n/**\n * The avatar name container\n */\n\nexport function AvatarName(props: AvatarNameProps) {\n  const { name, getInitials, ...rest } = props\n  const styles = useAvatarStyles()\n\n  return (\n    <chakra.div role=\"img\" aria-label={name} {...rest} __css={styles.label}>\n      {name ? getInitials?.(name) : null}\n    </chakra.div>\n  )\n}\n\nAvatarName.displayName = \"AvatarName\"\n","import { chakra, ChakraComponent } from \"@chakra-ui/system\"\n\n/**\n * Fallback avatar react component.\n * This should be a generic svg used to represent an avatar\n */\nexport const GenericAvatarIcon: ChakraComponent<\"svg\"> = (props) => (\n  <chakra.svg\n    viewBox=\"0 0 128 128\"\n    color=\"#fff\"\n    width=\"100%\"\n    height=\"100%\"\n    className=\"chakra-avatar__svg\"\n    {...props}\n  >\n    <path\n      fill=\"currentColor\"\n      d=\"M103,102.1388 C93.094,111.92 79.3504,118 64.1638,118 C48.8056,118 34.9294,111.768 25,101.7892 L25,95.2 C25,86.8096 31.981,80 40.6,80 L87.4,80 C96.019,80 103,86.8096 103,95.2 L103,102.1388 Z\"\n    />\n    <path\n      fill=\"currentColor\"\n      d=\"M63.9961647,24 C51.2938136,24 41,34.2938136 41,46.9961647 C41,59.7061864 51.2938136,70 63.9961647,70 C76.6985159,70 87,59.7061864 87,46.9961647 C87,34.2938136 76.6985159,24 63.9961647,24\"\n    />\n  </chakra.svg>\n)\n","import { ImageProps, useImage } from \"@chakra-ui/image\"\nimport { chakra, SystemStyleObject } from \"@chakra-ui/system\"\nimport { cloneElement } from \"react\"\nimport { AvatarName } from \"./avatar-name\"\nimport { GenericAvatarIcon } from \"./generic-avatar-icon\"\n\ntype AvatarImageProps = ImageProps & {\n  getInitials?: (name: string) => string\n  borderRadius?: SystemStyleObject[\"borderRadius\"]\n  icon: React.ReactElement\n  iconLabel?: string\n  name?: string\n}\n\nexport function AvatarImage(props: AvatarImageProps) {\n  const {\n    src,\n    srcSet,\n    onError,\n    onLoad,\n    getInitials,\n    name,\n    borderRadius,\n    loading,\n    iconLabel,\n    icon = <GenericAvatarIcon />,\n    ignoreFallback,\n    referrerPolicy,\n    crossOrigin,\n  } = props\n\n  /**\n   * use the image hook to only show the image when it has loaded\n   */\n  const status = useImage({ src, onError, crossOrigin, ignoreFallback })\n\n  const hasLoaded = status === \"loaded\"\n\n  /**\n   * Fallback avatar applies under 2 conditions:\n   * - If `src` was passed and the image has not loaded or failed to load\n   * - If `src` wasn't passed\n   *\n   * In this case, we'll show either the name avatar or default avatar\n   */\n  const showFallback = !src || !hasLoaded\n\n  if (showFallback) {\n    return name ? (\n      <AvatarName\n        className=\"chakra-avatar__initials\"\n        getInitials={getInitials}\n        name={name}\n      />\n    ) : (\n      cloneElement(icon, {\n        role: \"img\",\n        \"aria-label\": iconLabel,\n      })\n    )\n  }\n\n  /**\n   * If `src` was passed and the image has loaded, we'll show it\n   */\n  return (\n    <chakra.img\n      src={src}\n      srcSet={srcSet}\n      alt={name}\n      onLoad={onLoad}\n      referrerPolicy={referrerPolicy}\n      crossOrigin={crossOrigin ?? undefined}\n      className=\"chakra-avatar__img\"\n      loading={loading}\n      __css={{\n        width: \"100%\",\n        height: \"100%\",\n        objectFit: \"cover\",\n        borderRadius,\n      }}\n    />\n  )\n}\n\nAvatarImage.displayName = \"AvatarImage\"\n","import { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useCallback, useEffect, useRef, useState } from \"react\"\n\ntype NativeImageProps = React.ImgHTMLAttributes<HTMLImageElement>\n\nexport interface UseImageProps {\n  /**\n   * The image `src` attribute\n   */\n  src?: string\n  /**\n   * The image `srcset` attribute\n   */\n  srcSet?: string\n  /**\n   * The image `sizes` attribute\n   */\n  sizes?: string\n  /**\n   * A callback for when the image `src` has been loaded\n   */\n  onLoad?: NativeImageProps[\"onLoad\"]\n  /**\n   * A callback for when there was an error loading the image `src`\n   */\n  onError?: NativeImageProps[\"onError\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n  /**\n   * The key used to set the crossOrigin on the HTMLImageElement into which the image will be loaded.\n   * This tells the browser to request cross-origin access when trying to download the image data.\n   */\n  crossOrigin?: NativeImageProps[\"crossOrigin\"]\n  loading?: NativeImageProps[\"loading\"]\n}\n\ntype Status = \"loading\" | \"failed\" | \"pending\" | \"loaded\"\n\nexport type FallbackStrategy = \"onError\" | \"beforeLoadOrError\"\n\ntype ImageEvent = React.SyntheticEvent<HTMLImageElement, Event>\n\n/**\n * React hook that loads an image in the browser,\n * and lets us know the `status` so we can show image\n * fallback if it is still `pending`\n *\n * @returns the status of the image loading progress\n *\n * @example\n *\n * ```jsx\n * function App(){\n *   const status = useImage({ src: \"image.png\" })\n *   return status === \"loaded\" ? <img src=\"image.png\" /> : <Placeholder />\n * }\n * ```\n */\nexport function useImage(props: UseImageProps) {\n  const {\n    loading,\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback,\n  } = props\n\n  const [status, setStatus] = useState<Status>(\"pending\")\n\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\")\n  }, [src])\n\n  const imageRef = useRef<HTMLImageElement | null>()\n\n  const load = useCallback(() => {\n    if (!src) return\n\n    flush()\n\n    const img = new Image()\n    img.src = src\n    if (crossOrigin) img.crossOrigin = crossOrigin\n    if (srcSet) img.srcset = srcSet\n    if (sizes) img.sizes = sizes\n    if (loading) img.loading = loading\n\n    img.onload = (event) => {\n      flush()\n      setStatus(\"loaded\")\n      onLoad?.(event as unknown as ImageEvent)\n    }\n    img.onerror = (error) => {\n      flush()\n      setStatus(\"failed\")\n      onError?.(error as any)\n    }\n\n    imageRef.current = img\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading])\n\n  const flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null\n      imageRef.current.onerror = null\n      imageRef.current = null\n    }\n  }\n\n  useSafeLayoutEffect(() => {\n    /**\n     * If user opts out of the fallback/placeholder\n     * logic, let's bail out.\n     */\n    if (ignoreFallback) return undefined\n\n    if (status === \"loading\") {\n      load()\n    }\n    return () => {\n      flush()\n    }\n  }, [status, load, ignoreFallback])\n\n  /**\n   * If user opts out of the fallback/placeholder\n   * logic, let's just return 'loaded'\n   */\n  return ignoreFallback ? \"loaded\" : status\n}\n\nexport const shouldShowFallbackImage = (\n  status: Status,\n  fallbackStrategy: FallbackStrategy,\n) =>\n  (status !== \"loaded\" && fallbackStrategy === \"beforeLoadOrError\") ||\n  (status === \"failed\" && fallbackStrategy === \"onError\")\n\nexport type UseImageReturn = ReturnType<typeof useImage>\n","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { callAllHandlers, cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { AvatarStylesProvider } from \"./avatar-context\"\nimport { AvatarImage } from \"./avatar-image\"\nimport { GenericAvatarIcon } from \"./generic-avatar-icon\"\nimport { initials } from \"./avatar-name\"\nimport { AvatarOptions } from \"./avatar-types\"\nimport { useState } from \"react\"\n\nexport const baseStyle: SystemStyleObject = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  textTransform: \"uppercase\",\n  fontWeight: \"medium\",\n  position: \"relative\",\n  flexShrink: 0,\n}\n\nexport interface AvatarProps\n  extends Omit<HTMLChakraProps<\"span\">, \"onError\">,\n    AvatarOptions,\n    ThemingProps<\"Avatar\"> {\n  crossOrigin?: HTMLChakraProps<\"img\">[\"crossOrigin\"]\n  iconLabel?: string\n  /**\n   * If `true`, opt out of the avatar's `fallback` logic and\n   * renders the `img` at all times.\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n}\n\n/**\n * Avatar component that renders an user avatar with\n * support for fallback avatar and name-only avatars\n */\nexport const Avatar = forwardRef<AvatarProps, \"span\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Avatar\", props)\n  const [isLoaded, setIsLoaded] = useState(false)\n\n  const {\n    src,\n    srcSet,\n    name,\n    showBorder,\n    borderRadius = \"full\",\n    onError,\n    onLoad: onLoadProp,\n    getInitials = initials,\n    icon = <GenericAvatarIcon />,\n    iconLabel = \" avatar\",\n    loading,\n    children,\n    borderColor,\n    ignoreFallback,\n    crossOrigin,\n    referrerPolicy,\n    ...rest\n  } = omitThemingProps(props)\n\n  const avatarStyles: SystemStyleObject = {\n    borderRadius,\n    borderWidth: showBorder ? \"2px\" : undefined,\n    ...baseStyle,\n    ...styles.container,\n  }\n\n  if (borderColor) {\n    avatarStyles.borderColor = borderColor\n  }\n\n  return (\n    <chakra.span\n      ref={ref}\n      {...rest}\n      className={cx(\"chakra-avatar\", props.className)}\n      data-loaded={dataAttr(isLoaded)}\n      __css={avatarStyles}\n    >\n      <AvatarStylesProvider value={styles}>\n        <AvatarImage\n          src={src}\n          srcSet={srcSet}\n          loading={loading}\n          onLoad={callAllHandlers(onLoadProp, () => {\n            setIsLoaded(true)\n          })}\n          onError={onError}\n          getInitials={getInitials}\n          name={name}\n          borderRadius={borderRadius}\n          icon={icon}\n          iconLabel={iconLabel}\n          ignoreFallback={ignoreFallback}\n          crossOrigin={crossOrigin}\n          referrerPolicy={referrerPolicy}\n        />\n        {children}\n      </AvatarStylesProvider>\n    </chakra.span>\n  )\n})\n\nAvatar.displayName = \"Avatar\"\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/authOperations';\nimport { Icon } from '@chakra-ui/react';\nimport { MdEmail } from 'react-icons/md';\nimport { LinkWrap } from './LoginForm.styled';\n\nimport {\n  Flex,\n  Heading,\n  Input,\n  Button,\n  InputGroup,\n  Stack,\n  InputLeftElement,\n  chakra,\n  Box,\n  // Link,\n  Avatar,\n  FormControl,\n  // FormHelperText,\n  InputRightElement,\n} from '@chakra-ui/react';\nimport { FaLock } from 'react-icons/fa';\n\n// const CFaUserAlt = chakra(FaUserAlt);\nconst CFaLock = chakra(FaLock);\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n  const [showPassword, setShowPassword] = useState(false);\n\n  const handleShowClick = () => setShowPassword(!showPassword);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    dispatch(\n      logIn({\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n    form.reset();\n  };\n\n  return (\n    <Flex flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\">\n      <Stack\n        flexDir=\"column\"\n        mb=\"2\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n      >\n        <Avatar bg=\"orange.400\" mt=\"2\" />\n        <Heading color=\"gray.600\">Login</Heading>\n        <Box minW={{ base: '90%', md: '468px' }}>\n          <form onSubmit={handleSubmit}>\n            <Stack\n              spacing={4}\n              p=\"1rem\"\n              backgroundColor=\"whiteAlpha.900\"\n              boxShadow=\"md\"\n            >\n              <FormControl>\n                <InputGroup>\n                  <InputLeftElement\n                    pointerEvents=\"none\"\n                    children={\n                      <Icon as={MdEmail} color=\"gray.300\" w={5} h={5} />\n                    }\n                  />\n                  <Input type=\"email\" name=\"email\" placeholder=\"Email\" />\n                </InputGroup>\n              </FormControl>\n              <FormControl>\n                <InputGroup>\n                  <InputLeftElement\n                    pointerEvents=\"none\"\n                    color=\"gray.300\"\n                    children={<CFaLock color=\"gray.300\" />}\n                  />\n                  <Input\n                    type={showPassword ? 'text' : 'password'}\n                    name=\"password\"\n                    autoComplete=\"on\"\n                    placeholder=\"Password\"\n                  />\n                  <InputRightElement width=\"4.5rem\">\n                    <Button h=\"1.75rem\" size=\"sm\" onClick={handleShowClick}>\n                      {showPassword ? 'Hide' : 'Show'}\n                    </Button>\n                  </InputRightElement>\n                </InputGroup>\n                {/* <FormHelperText textAlign=\"right\">\n                  <Link>forgot password?</Link>\n                </FormHelperText> */}\n              </FormControl>\n              <Button\n                borderRadius={0}\n                type=\"submit\"\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                width=\"full\"\n              >\n                Login\n              </Button>\n            </Stack>\n          </form>\n        </Box>\n      </Stack>\n      <Box>\n        New to us?\n        <LinkWrap to=\"/register\">Register</LinkWrap>\n      </Box>\n    </Flex>\n  );\n};\n\n// import { useDispatch } from 'react-redux';\n// import { logIn } from 'redux/auth/authOperations';\n// import { Label, Form } from './LoginForm.styled';\n\n// export const LoginForm = () => {\n//   const dispatch = useDispatch();\n\n//   const handleSubmit = e => {\n//     e.preventDefault();\n//     const form = e.currentTarget;\n//     dispatch(\n//       logIn({\n//         email: form.elements.email.value,\n//         password: form.elements.password.value,\n//       })\n//     );\n//     form.reset();\n//   };\n\n//   return (\n//     <Form onSubmit={handleSubmit} autoComplete=\"off\">\n//       <Label>\n//         Email\n//         <input type=\"email\" name=\"email\" />\n//       </Label>\n//       <Label>\n//         Password\n//         <input type=\"password\" name=\"password\" />\n//       </Label>\n//       <button type=\"submit\">Log In</button>\n//     </Form>\n//   );\n// };\n","// import { Helmet } from 'react-helmet';\nimport { LoginForm } from 'components/LoginForm/LoginForm';\n\nexport default function Login() {\n  return (\n    <div>\n      {/* <Helmet> */}\n      <title>Login</title>\n      {/* </Helmet> */}\n      <LoginForm />\n    </div>\n  );\n}\n"],"names":["LinkWrap","styled","Link","createContext","name","hookName","providerName","AvatarStylesProvider","useAvatarStyles","names","split","firstName","_a","lastName","length","charAt","AvatarName","props","getInitials","rest","styles","div","chakra","initials","__css","label","children","displayName","svg","GenericAvatarIcon","color","width","height","className","fill","jsx","d","srcSet","onError","onLoad","borderRadius","loading","iconLabel","icon","ignoreFallback","referrerPolicy","src","crossOrigin","status","hasLoaded","showFallback","sizes","useState","setStatus","useEffect","imageRef","useRef","load","useCallback","flush","img","Image","srcset","onload","event","onerror","error","current","useSafeLayoutEffect","cloneElement","useImage","role","AvatarImage","objectFit","textTransform","fontWeight","position","flexShrink","Avatar","ref","isLoaded","setIsLoaded","cx","alignItems","showBorder","dataAttr","onLoadProp","forwardRef","justifyContent","useMultiStyleConfig","borderColor","avatarStyles","borderWidth","container","span","callAllHandlers","value","baseStyle","display","textAlign","omitThemingProps","jsxs","CFaLock","FaLock","LoginForm","dispatch","useDispatch","showPassword","setShowPassword","flexDirection","flexDir","mb","bg","mt","minW","base","md","onSubmit","e","preventDefault","form","currentTarget","logIn","email","elements","password","reset","spacing","p","backgroundColor","boxShadow","pointerEvents","as","MdEmail","w","h","I","type","placeholder","autoComplete","size","onClick","variant","colorScheme","to","Login"],"sourceRoot":""}